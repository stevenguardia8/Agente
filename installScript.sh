#!/bin/bash

# Check before locking $0, as the first user has exclusive lock privileges
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root (use sudo or su)"
  exit 1
fi
# try to acquire exclusive lock, if failed exit with code 254
[ "${SBA_FLOCKER}" != "$0" ] && exec env SBA_FLOCKER="$0" flock -E 254 -en "/tmp/sbalinux-install.lock" "$0" "$@" || :

set -euo pipefail

[[ ! -z ${SBA_INSTALLER_DEBUG:=""} ]] && set -x

# force english localization for package manager
export LANGUAGE=en_US:en

# script version placeholder should be replaced by CI pipeline
SCRIPT_VER='1.10.5'

# offline package metadata
PACKAGE_DISPLAY_NAME="__CP_PACKAGE_NAME__"
PACKAGE_ID="__CP_PACKAGE_ID__"
PACKAGE_DISTRO="__CP_PACKAGE_DISTRO__"
PACKAGE_FEATURES="__CP_PACKAGE_BLADE_MASK__"
PACKAGE_PLATFORM="__CP_PACKAGE_PLATFORM__"

# embedded arguments to be filled by the management server providing the script, __CP_*__ place holders should be replaced with valid values
# >>REPLACE START
EMBEDDED_MGMT_FQDN='DUNOSU-de941bc0-hap1.epmgmt.checkpoint.com'
EMBEDDED_MGMT_KEY='__CP_MGMT_KEY__'
EMBEDDED_MGMT_CA_CERT=''
EMBEDDED_MGMT_CA_CERT_SIG=''
EMBEDDED_BLADE_MASK='__CP_BLADE_MASK__'
EMBEDDED_CONFIG_DAT=''
# <<REPLACE END

ARCH=$(uname -m)

# function to check if embedded argument contains a non-placeholder value
function is_valid_embedded_arg() {
  local ext_arg=$1
  [[ ! $1 =~ ^__CP.*__$ ]]
}

function is_suse() {
  [[ $g_distro_name == "leap" || $g_distro_name == "sles" ]]
}

# apply valid embedded arguments
function apply_embedded_arguments() {
  if is_valid_embedded_arg "$EMBEDDED_MGMT_FQDN"; then SBA_MANAGEMENT_URL="https://${EMBEDDED_MGMT_FQDN}"; fi
  if is_valid_embedded_arg "$EMBEDDED_MGMT_KEY"; then SBA_MANAGEMENT_KEY=$EMBEDDED_MGMT_KEY; fi
  if is_valid_embedded_arg "$EMBEDDED_MGMT_CA_CERT"; then g_mgmt_ca_cert_data_base64=$EMBEDDED_MGMT_CA_CERT; fi
  if is_valid_embedded_arg "$EMBEDDED_MGMT_CA_CERT_SIG"; then g_mgmt_ca_cert_sig_data_base64=$EMBEDDED_MGMT_CA_CERT_SIG; fi
  if is_valid_embedded_arg "$EMBEDDED_CONFIG_DAT"; then g_da_config_dat_content=$EMBEDDED_CONFIG_DAT; SBA_CONFIG_DAT_FILE=$g_da_config_dat_file; fi
}

# write log rotate file for a given log
function logrotate_log_file() {
  local logrotate_base_path=$1
  local logrotate_file_path=$2
  local log_path=$3

  if [[ -d $logrotate_base_path ]]; then
    echo "${log_path} {" >$logrotate_file_path
    echo "  size 10M" >>$logrotate_file_path
    echo "  rotate 5" >>$logrotate_file_path
    echo "}" >>$logrotate_file_path
  fi
}

# write environment file to be used by cron jobs and possibly product services
function write_env_file() {
  mkdir -p $g_save_folder
  : >$g_env_file
  set +u
  echo "DEBIAN_FRONTEND=noninteractive" >>$g_env_file
  echo "SBA_REPO_TYPE=$SBA_REPO_TYPE" >>$g_env_file
  echo "PATH=$PATH" >>$g_env_file
  echo "HTTP_PROXY=$HTTP_PROXY" >>$g_env_file
  echo "http_proxy=$http_proxy" >>$g_env_file
  echo "HTTPS_PROXY=$HTTPS_PROXY" >>$g_env_file
  echo "https_proxy=$https_proxy" >>$g_env_file
  echo "NO_PROXY=$NO_PROXY" >>$g_env_file
  echo "no_proxy=$no_proxy" >>$g_env_file
  set -u
}

# update a single variable in the environment file
function update_env_file() {
  local key=$1
  local value=$2
  if [[ $2 == "none" ]]; then
    value=""
  fi
  if [[ -f $g_env_file ]]; then
    sed -i "s|^\($key=\).*|\1$value|i" $g_env_file
  fi
}

# remove environment file if no products are installed
function remove_env_file() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_env_file
    set +e
    rm -df $g_save_folder
    set -e
  fi
}

# manually clean the garbage
function remove_leftovers() {
  #clamav and clamd traces
  echo "Removing clamav and clamd traces"
  rm -rfv "/etc/clam.d"
  rm -rfv "/usr/share/clamav"
  rm -rf "/etc/checkpoint/common/install_cronjob.sh"
  rm -rf "/etc/checkpoint/common"

  local explicit_files=(
    "/var/cache/checkpoint/cpmgmt/logcache.cache"
    "/var/lib/checkpoint/cpmgmt/telemetry_msgs_sent.json"
    "/var/lib/checkpoint/da/config.dat"
    "/var/cache/checkpoint/cpsba/bg/linux_rules_version"
    "/var/lib/checkpoint/cpam/cpam-status.json"
    "/var/lib/checkpoint/cpam/infections.json"
    "/var/log/checkpoint/common/sbalinux-update.log"
    "/var/log/checkpoint/common/sbalinux-product-update.log"
  )
  for f in "${explicit_files[@]}" ; do
    rm -rf "$f" && echo "$f removed"
  done

  local explicit_dirs=(
    "/var/cache/checkpoint/cpsba/bg"
    "/var/cache/checkpoint/cpsba"
    "/var/cache/checkpoint/cpmgmt"
    "/var/cache/checkpoint"
    "/var/lib/checkpoint/cpam"
    "/var/lib/checkpoint/cpmgmt"
    "/var/lib/checkpoint/da"
    "/var/lib/checkpoint"
    "/var/log/checkpoint/cpam"
    "/var/log/checkpoint/common"
    "/var/log/checkpoint"
    "/etc/checkpoint"
  )
  for d in "${explicit_dirs[@]}" ; do
    rmdir "$d" && echo "Empty $d dir is removed"
  done
}

# offline_package: extract self contained archive from install_offline.sh to mktemp
function unpack_bootstrap() {
  echo "unpack_bootstrap started for $0"
  if ! grep -m 1 "^__ARCHIVE_FOLLOWS__" "$0" ; then
    echo "Error: this offline package does not seem to have embedded archive"
    echo "Please ensure, that you're using correct package (install_offline.sh)"
    exit 1
  fi
  awk 'f; /^__ARCHIVE_FOLLOWS__/{f=1}' "$0" | base64 -d | tar -C "$g_bootstrap_dir" -xz
  echo "unpack_bootstrap finished"
  echo "ls $g_bootstrap_dir"
  ls -la "$g_bootstrap_dir"
}

function prepare_offline_yum_package() {
  # NOTE: --disablerepo=* is used because offline repo is not configured at the moment

  run_for "centos_7,redhat_7,oracle_7,amazon_2" yum install -y --disablerepo=* \
    "$g_bootstrap_dir"/rpm/libxml2*.rpm \
    "$g_bootstrap_dir"/rpm/libxml2-python*.rpm \
    "$g_bootstrap_dir"/rpm/python-chardet*.rpm \
    "$g_bootstrap_dir"/rpm/python-kitchen*.rpm \
    "$g_bootstrap_dir"/rpm/yum-utils*.rpm || /bin/true

  run_for "centos_8,redhat_8,oracle_8,redhat_9,centos_9" yum install -y --disablerepo=* \
    "$g_bootstrap_dir"/rpm/dnf-plugins-core*.rpm \
    "$g_bootstrap_dir"/rpm/python3-dnf-plugins-core*.rpm \
    "$g_bootstrap_dir"/rpm/yum-utils*.rpm || /bin/true
}

function prepare_offline_package() {
  if [[ "$g_got_remote_install_product_arg" -eq 0 ]]; then
    g_remote_install_products="am"
    g_got_remote_install_product_arg=1
  fi

  g_bootstrap_dir="$(mktemp -d)"
  unpack_bootstrap
  mkdir -p "$g_offline_repo_path"
  cp -Rafv "$g_bootstrap_dir/$g_package_type/"* "$g_offline_repo_path"

  if [ "$g_package_type" = "rpm" ]; then
    prepare_offline_yum_package
  fi
}

function remove_bootstrap_if_needed() {
  [ -n "$g_bootstrap_dir" ] && echo "g_bootstrap_dir: $g_bootstrap_dir"
  if [ -n "$SBA_OFFLINE_PACKAGE" ] && [ -d "$g_bootstrap_dir" ] ; then
    echo "cleaning temp offline_package dir"
    rm -rf "$g_bootstrap_dir"
  fi
}

# schedule cron job that will retry to install if previous attempt failed
function schedule_install_cron_job() {
  if [[ $g_install_with_cron_job == "no" || -f $g_cron_file_reinstall_path ]]; then
    return
  fi

  save_self

  local logrotate_base_path="/etc/logrotate.d"
  local logrotate_file_path="${logrotate_base_path}/sbalinux-install"
  local log_base_path="/var/log/checkpoint/common"
  local log_path="${log_base_path}/sbalinux-install.log"
  local cron_job_install_script="$g_save_folder/install_cronjob.sh"

  local env_vars_exports="set -o allexport; source $g_env_file; set +o allexport"
  local echo_log_cmd="echo \"--- starting install: \$(date) ---\""
  local last_install_command="${g_saved_script} ${g_args}"

  mkdir -p $log_base_path

  : >$cron_job_install_script
  chmod 744 $cron_job_install_script
  echo '#!/bin/bash' >>$cron_job_install_script
  echo $env_vars_exports >>$cron_job_install_script
  echo $echo_log_cmd >>$cron_job_install_script
  echo $last_install_command >>$cron_job_install_script
  echo "$g_install_cron_timing  root  $cron_job_install_script >> ${log_path} 2>&1" >>$g_cron_file_reinstall_path

  logrotate_log_file "$logrotate_base_path" "$logrotate_file_path" "$log_path"
}

# remove install retry cron job, should be called after installation success
function remove_install_cron_job() {
  local logrotate_base_path="/etc/logrotate.d"
  local logrotate_file_path="${logrotate_base_path}/sbalinux-install"
  local cron_job_install_script="$g_save_folder/install_cronjob.sh"

  if [[ $g_install_with_cron_job == "no" ]]; then
    return
  fi

  # clean-up any additional cron job related files
  remove_self
  rm -f $g_cron_file_reinstall_path
  rm -f $g_cron_file_switch_repo_path
  rm -f $logrotate_file_path
  rm -f $cron_job_install_script
  set +e
  rm -df $g_save_folder
  set -e
}

function is_http_url() {
  if [[ $1 =~ ^http(s{0,1}):\/\/.*$ ]]; then
    echo "true"
  fi
}

function is_guid() {
  if [[ $1 =~ ^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$ ]]; then
    echo "true"
  fi
}

function is_sysdig_needed() {
  if [ "$g_operation" == "install" ]; then
    test "$g_remote_install_products" != "am"
  elif [ "$g_operation" == "update" ]; then
    test "$g_update_product" != "am"
  fi
}

function is_centos_8_based() {
  [[ ($g_distro_name == "centos" && $g_distro_version -ge 8) \
    || ($g_distro_name == "redhat" && $g_distro_version -ge 8) \
    || ($g_distro_name == "oracle" && $g_distro_version -ge 8) \
    || ($g_distro_name == "euler") ]]
}

function is_euleros() {
  [[ ($g_distro_name == "euler") ]]
}

function is_centos_9_based() {
  [[ ($g_distro_name == "centos" && $g_distro_version -ge 9) || \
     ($g_distro_name == "redhat" && $g_distro_version -ge 9) ]]
}

function is_ubuntu_22() {
  [[ ($g_distro_name == "ubuntu" && $g_distro_version -eq 22) ]]
}

function check_offline_package() {
  if grep -q -m 1 "^__ARCHIVE_FOLLOWS__" "$0" ; then
    export SBA_OFFLINE_PACKAGE=yes
  fi
}

function check_install_cmd_args() {
  if [[ -z $SBA_MANAGEMENT_URL ]]; then
    echo "Missing management server configuration, for usage run: $0 --help"
    exit 1
  fi

  # accept base64 encoded key
  if [[ ! $SBA_MANAGEMENT_KEY =~ ^[A-Za-z0-9+/=]*$ ]]; then
    echo "Illegal management server key"
    exit 1
  fi

  # Validation of URL is not strict. The possible one to cover domain name and IPv4 address is:
  # ^https?:\/\/(((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+[A-Za-z]{2,6}|([0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]+)?)$
  if [[ ! $SBA_MANAGEMENT_URL =~ ^https?:\/\/ ]]; then
    echo "Illegal management server url $SBA_MANAGEMENT_URL. It should be in form http(s)://<IP|hostname>"
    exit 1
  fi

  if [[ ! -z $HTTP_PROXY && -z $(is_http_url $HTTP_PROXY) ]]; then
    echo "Illegal http proxy url"
    exit 1
  fi

  if [[ ! -z $HTTPS_PROXY && -z $(is_http_url $HTTPS_PROXY) ]]; then
    echo "Illegal https proxy url"
    exit 1
  fi

  if [[ -z $g_install_source ]]; then
    echo "Missing install source, for usage run: $0 --help"
    exit 1
  fi

  if [[ $g_install_source == "remote" ]]; then
    if [[ -z $g_remote_install_products ]]; then
      echo "Please specify product to install from the remote package repository"
      exit 1
    fi
    if [[ ! -z $g_local_install_file_name ]]; then
      echo "Package file name cannot be specified when installing from remote package repository"
      exit 1
    fi
  elif [[ $g_install_source == "local" ]]; then
    if [[ -z $g_local_install_file_name ]]; then
      echo "Please specify package file name to install"
      exit 1
    fi
  fi

  if [[ ! -z $g_version_to_install ]]; then
    if [[ $g_install_source != "remote" ]]; then
      echo "Version to install can only be specified for installation from a remote repository"
      exit 1
    fi
    if [[ ! $g_version_to_install =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "Version to install is invalid"
      exit 1
    fi
  fi

  if [[ ! -z $g_install_with_cron_job ]]; then
    if [[ $g_install_with_cron_job != "yes" && $g_install_with_cron_job != "no" ]]; then
      echo "Invalid argument for 'retry' option, please specify 'yes' or 'no'"
      exit 1
    fi
  fi

  if [[ ! -z $g_should_schedule_upgrade ]]; then
    if [[ $g_should_schedule_upgrade != "yes" && $g_should_schedule_upgrade != "no" ]]; then
      echo "Invalid argument for 'upgrade' option, please specify 'yes' or 'no'"
      exit 1
    fi
  fi

  if [[ ! -z $SBA_VDS_LOCATION_GUID && -z $(is_guid $SBA_VDS_LOCATION_GUID) ]]; then
    echo "Illegal group id. Group id should be in GUID format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    exit 1
  fi
}

function check_umask() {
  local um
  um=$(umask)
  local supported_umask="0022"
  if [[ $(umask) != "0022" ]] ; then
    echo "Error!"
    echo "Installation script has detected an umask: \"${um}\"."
    echo "Only ${supported_umask} is supported. Other variants might lead to"
    echo "unpredictable behavior when working as an unprivileged"
    echo "user. Refused to proceed."
    exit 1
  fi
}

function force_env_vars() {
  if [ "$g_distro_name" == "debian" ] && [ "$g_distro_version" -eq 11 ]; then
    export USE_CPCLAM=false
  fi
}

function to_lower() {
  echo $(echo $1 | tr "[:upper:]" "[:lower:]")
}

function ensure_forced_distro(){
  OLD_IFS=$IFS
  IFS='_'
  read -ra distro <<< "$SBA_FORCE_DISTRO"
  g_distro_name=$(to_lower ${distro[0]})
  g_distro_version=${distro[1]}
  echo "Forced to use $g_distro_name $g_distro_version distribution"
  IFS=$OLD_IFS
}

function detect_package_type() {
  # check architecture
  if [[ ! $ARCH == "x86_64" && ! $ARCH == "aarch64" ]]; then
    return
  fi

  if [[ ! -z ${SBA_FORCE_DISTRO:=""} ]]; then
    ensure_forced_distro
  else
    # check distro
    if [[ -f "/etc/debian_version" ]]; then  # debian-based distros
      if [[ ! $ARCH == "x86_64" ]]; then
        return
      fi

      if [[ -f "/etc/lsb-release" ]]; then
        . "/etc/lsb-release"
        g_distro_name=$(echo "$DISTRIB_ID" | tr '[:upper:]' '[:lower:]')
        g_distro_version=${DISTRIB_RELEASE%%.*}
      else
        g_distro_name="debian"
        g_distro_version=$(cut -d'.' -f1 "/etc/debian_version")
      fi
    elif [ -f "/etc/system-release-cpe" ]; then  # centos-based distros
      g_distro_name=$(cut -d':' -f3 "/etc/system-release-cpe")
      g_distro_version=$(cut -d':' -f5 "/etc/system-release-cpe" | cut -d'.' -f1 | sed 's/[^0-9]*//g')
      if [[ $g_distro_name == "o" ]]; then
        g_distro_name=$(cut -d':' -f4 "/etc/system-release-cpe")
        g_distro_version=$(cut -d':' -f6 "/etc/system-release-cpe")
      elif [[ $g_distro_name == "euler" ]]; then
        g_distro_version=$(cut -d':' -f5 "/etc/system-release-cpe" | sed 's/[^0-9]*//g')
      fi
    elif [ -f /etc/os-release ] ; then  # suse-based distros
      g_distro_name=$(grep -Po '(?<=^CPE_NAME=).*(?=)' "/etc/os-release" | cut -d ':' -f 4)
      g_distro_version="$(grep -Po '(?<=VERSION_ID=").*(?=")' "/etc/os-release" | tr -dc '0-9')"
    fi
  fi

  # debian-based distros
  if [[ ($g_distro_name == "ubuntu" && $g_distro_version -ge 16 && $g_distro_version -le 22) \
     || ($g_distro_name == "debian" && $g_distro_version -ge 9  && $g_distro_version -le 11) ]]; then
    g_package_type="deb"
  fi

  # centos-based distros
  if [[ ($g_distro_name == "centos" && $g_distro_version -ge 7 && $g_distro_version -le 9) \
     || ($g_distro_name == "redhat" && $g_distro_version -ge 7 && $g_distro_version -le 9) \
     || ($g_distro_name == "oracle" && $g_distro_version -ge 7 && $g_distro_version -le 8) \
     || ($g_distro_name == "amazon" && $g_distro_version -eq 2) \
     || ($g_distro_name == "euler" && ($g_distro_version -eq 205 || $g_distro_version -eq 208 \
                                    || $g_distro_version -eq 209 || $g_distro_version -eq 2010)) ]]; then
      g_package_type="rpm"
      g_rpm_repo_config_file="/etc/yum.repos.d/sbalinux.repo"
  fi

  # suse-based distros
  if [[ ($g_distro_name == "leap" && ($g_distro_version -eq 423 || $g_distro_version -eq 153)) \
     || ($g_distro_name == "sles" && ($g_distro_version -eq 125 || $g_distro_version -eq 153)) ]]; then
      g_package_type="rpm"
      g_rpm_repo_config_file="/etc/zypp/repos.d/sbalinux.repo"
  fi
}

function set_repo_type() {
  g_repo_type=${SBA_REPO_TYPE:=$g_repo_type}
}

function set_blades_from_products() {
  local products_str=$1

  # split into array with unique elements
  g_blades=($(echo $products_str | tr "," "\n" | sort -u | tr "\n" " "))

  if [[ ${#g_blades[@]} -eq 0 ]]; then
      if [[ $ARCH == "x86_64" ]]; then
        g_blades=("edr" "am")
      else
        g_blades=("am")
      fi
  fi

  for product in ${g_blades[*]}; do
    if [[ -z ${g_prod_to_blade[$product]:=""} ]]; then
      echo "invalid product '$product'"
      exit 1
    fi
  done
}

function list_contains_item() {
  local list="$1"
  local item="$2"
  if [[ $list =~ (^|[[:space:]])"$item"($|[[:space:]]) ]]; then
    result=0
  else
    result=1
  fi
  return $result
}

function bypass_proxy() {
  if [ $# -eq 0 ]; then
    # No argument supplied. no_proxy remains unchanged
    return
  fi

  local fqdn=$1
  if [[ -z ${no_proxy:=""} ]]; then
    export no_proxy=$fqdn
  else
    export no_proxy="$no_proxy,$fqdn"
  fi
  if [[ -z ${NO_PROXY:=""} ]]; then
    export NO_PROXY=$fqdn
  else
    export NO_PROXY="$NO_PROXY,$fqdn"
  fi
}

function configure_deb_offline_repo() {
  # import public keys
  cat "$g_bootstrap_dir"/pks/public | apt-key add -

  # configure /etc/apt/sources.list.d/sbalinux_offline
  local config_file=$g_deb_repo_config_file
  local repo_name=sbalinux_offline
  echo "deb [trusted=yes] file://$g_offline_repo_path ./" >$config_file
}

# configure sbalinux deb repo
function configure_deb_repo() {
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    configure_deb_offline_repo
    return
  fi
  local repo_type=$1
  local config_file=$g_deb_repo_config_file

  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.public"
    local repo_url="https://${repo_fqdn}/sbalinux/packages/deb"
  elif [[ $repo_type == "dev"  ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local key_url="https://${repo_fqdn}/artifactory/api/gpg/key/public"
    local repo_url="https://${repo_fqdn}/artifactory/SBA_DEB"
    # add proxy bypass for artifactory
    bypass_proxy ${repo_fqdn}
  else
    echo "invalid repository type"
    exit 1
  fi

  mkdir -p $(dirname "$config_file")
  curl -s $key_url | apt-key add -
  echo "deb [arch=amd64] ${repo_url} ${repo_type} ${g_distro_name}_${g_distro_version}" >$config_file
}

function configure_rpm_offline_repo() {
  echo "Importing sbalinux key..."
  rpm --import "$g_bootstrap_dir/pks/sbalinux-gpg-key.asc"

  if is_sysdig_needed ; then
    echo "Importing DRAIOS key..."
    rpm --import "$g_bootstrap_dir/pks/DRAIOS-GPG-KEY.public"
  fi

  if is_centos_8_based; then
    echo "Importing CentOS 8 key..."
    rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-CentOS-Official"
  else
    if [ "$ARCH" = "x86_64" ]; then
      echo "Importing CentOS 7 key for x86_64..."
      rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-CentOS-7"
    elif [ "$ARCH" = "aarch64" ]; then
      echo "Importing CentOS 7 key for aarch64..."
      rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-CentOS-7-aarch64"
    fi
  fi

  if is_centos_9_based ; then
    echo "Importing EPEL 9 key..."
    rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-EPEL-9"
  elif is_centos_8_based ; then
    echo "Importing EPEL 8 key..."
    rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-EPEL-8"
  else
    echo "Importing EPEL 7 key..."
    rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-EPEL-7"
  fi

  if [ "$g_distro_name" = "oracle" ]; then
    echo "Importing Oracle 7 key..."
    rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-oracle-ol7"
    echo "Importing Oracle 8 key..."
    rpm --import "$g_bootstrap_dir/pks/RPM-GPG-KEY-oracle-ol8"
  fi

  local config_file=$g_rpm_repo_config_file
  local repo_name=sbalinux_offline
  {
    echo "[${repo_name}]"
    echo "name=${repo_name}"
    echo "baseurl=file://$g_offline_repo_path"
    echo "enabled=1"
    echo "gpgcheck=1"
    echo "sslverify=1"
    echo "priority=5"
  } > "$config_file"
}

# make sysdig keys repo known to system, so package downloaded from CP repos could be verified
function import_sysdig_rpm_key() {
  rpm --quiet --import https://s3.amazonaws.com/download.draios.com/DRAIOS-GPG-KEY.public
}

# configure sbalinux rpm repo
function configure_rpm_repo() {
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    configure_rpm_offline_repo
    return
  fi
  local repo_type=$1
  local config_file=$g_rpm_repo_config_file
  local repo_name="sbalinux_${repo_type}"
  # Leave pure sbalinux only for prod
  [[ $repo_type == "prod" ]] && repo_name="sbalinux"
  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local repo_url="https://${repo_fqdn}/sbalinux/packages/rpm"
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.asc"
    local gpgcheck=1
    local sslverify=1
    local disable_proxy=0
  elif [[ $repo_type == "dev" ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local repo_url="https://${repo_fqdn}/artifactory/SBA_RPM"
    local key_url="https://${repo_fqdn}/artifactory/SBA_GEN/repo_public_keys/rpm/sbalinux-gpg-key.asc"
    local gpgcheck=0
    local sslverify=0
    local disable_proxy=1
    # add proxy bypass for artifactory
    bypass_proxy $repo_fqdn
  else
    echo "invalid repository type"
    exit 1
  fi

  is_sysdig_needed && import_sysdig_rpm_key
  rpm --import $key_url
  echo "[${repo_name}]" >$config_file
  echo "name=${repo_name}" >>$config_file
  echo "baseurl=${repo_url}/${repo_type}/${g_distro_name}_${g_distro_version}" >>$config_file
  echo "enabled=1" >>$config_file
  echo "gpgcheck=${gpgcheck}" >>$config_file
  echo "sslverify=${sslverify}" >>$config_file

  # pin repo priority becuase we want some dependencies to be hosted on our own repo
  # NOTE: to make repo priority work in centos/redhat older than 8 we need to install the yum-priorities plugin!
  echo "priority=1" >>$config_file

  if [[ $disable_proxy -gt 0 ]]; then
    echo "proxy=_none_" >>$config_file
  fi
  # refresh zypper for gpg key auto trust
  if is_suse ; then
    zypper --gpg-auto-import-keys refresh
  fi
}

function remove_deb_repo() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_deb_repo_config_file
  fi
}

function remove_rpm_repo() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_rpm_repo_config_file
  fi
}

function create_clam_user_apt() {
  if ! id -u clamav ; then
    mkdir -p /var/lib/clamav
    /usr/sbin/adduser --system --no-create-home --quiet --disabled-password --disabled-login --shell /bin/false --group --home /var/lib/clamav clamav
  fi
}

function create_clam_users_yum() {
  if ! id -u clamscan ; then
    /usr/sbin/groupadd -r clamscan
    /usr/sbin/useradd -r -g clamscan -d / -s /sbin/nologin -c "Clamav scanner user" clamscan
  fi

  if ! id -u clamupdate ; then
    mkdir -p /var/lib/clamav
    /usr/sbin/groupadd -r clamupdate
    /usr/sbin/useradd -r -g clamupdate -d /var/lib/clamav -s /sbin/nologin -c "Clamav database update user" clamupdate
  fi
}

function extract_clam_databases() {
    local database_dir=/var/lib/clamav
    mkdir -p "$database_dir"
    local clam_user="$1"
    cp -afv "$g_bootstrap_dir"/cvds/{daily,main,bytecode}.cvd "$database_dir"
    chown "$clam_user:$clam_user" "$database_dir"
    chmod o+r "$database_dir"/*.cvd
}

function install_prereq_apt() {
  # preconfigure samba-common to prevent it from popping a dialog requiring user input
  echo "samba-common samba-common/dhcp boolean false" | debconf-set-selections
  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    dpkg -i "$g_bootstrap_dir"/deb/apt-transport-https*.deb || /bin/true
    dpkg -i "$g_bootstrap_dir"/deb/{libcurl,curl}*.deb || /bin/true
    dpkg -i "$g_bootstrap_dir"/deb/glibc-tools*.deb || /bin/true

    # setup gnupg
    dpkg -i "$g_bootstrap_dir"/deb/{libassuan0,libksba8,libnpth0,pinentry}*.deb || /bin/true
    dpkg -i "$g_bootstrap_dir"/deb/{gpg,dirmngr}*.deb || /bin/true
    dpkg -i "$g_bootstrap_dir"/deb/gnupg*.deb || /bin/true

    apt-get update
    create_clam_user_apt
    extract_clam_databases "clamav"
    return
  fi
  # common
  apt-get update
  apt-get install -y curl gnupg apt-transport-https

  if is_ubuntu_22 ; then
    apt-get install -y glibc-tools
  fi

  if is_sysdig_needed; then
    apt-get install -y linux-headers-$(uname -r) || kernel_warning
  fi
}

function run_for() {
  local distros="$1"
  shift
  IFS=',' read -r -a dist_arr <<< "$distros"
  for distro_pack in "${dist_arr[@]}" ; do
    local dist
    local vers
    dist=$(cut -d'_' -f1 <<< "$distro_pack")
    vers=$(cut -d'_' -f2 <<< "$distro_pack")
    [ "$g_distro_name" != "$dist" ] && continue
    # continue if vers is not specified, e.g "euler" and version != current version
    [[ "${vers}" != "$dist" && "${g_distro_version}" -ne "${vers}" ]] && continue
    "$@" && break
  done
}

function install_prereq_yum_offline() {
  run_for "centos_7,oracle_7,redhat_7,amazon_2,euler_205" yum install -y --skip-broken \
    "$g_bootstrap_dir"/rpm/elfutils*.rpm \
    "$g_bootstrap_dir"/rpm/libcurl*.rpm \
    "$g_bootstrap_dir"/rpm/curl*.rpm \
    "$g_bootstrap_dir"/rpm/libidn2*.rpm \
    "$g_bootstrap_dir"/rpm/yum-plugin-priorities*.noarch.rpm \
    "$g_bootstrap_dir"/rpm/yum-plugin-versionlock*.noarch.rpm || /bin/true

  run_for "centos_8,redhat_8,oracle_8,centos_9,redhat_9" yum install -y --skip-broken \
    "$g_bootstrap_dir"/rpm/zlib-devel*.rpm \
    "$g_bootstrap_dir"/rpm/elfutils*.rpm \
    "$g_bootstrap_dir"/rpm/openssl-libs*.rpm \
    "$g_bootstrap_dir"/rpm/libcurl*.rpm \
    "$g_bootstrap_dir"/rpm/curl*.rpm \
    "$g_bootstrap_dir"/rpm/python3-dnf-plugins-core*.rpm \
    "$g_bootstrap_dir"/rpm/python3-dnf-plugin-versionlock*.rpm || /bin/true

  # For semanage
  run_for "euler_208,euler_209" yum install -y --skip-broken \
    "$g_bootstrap_dir"/rpm/python3*.rpm \
    "$g_bootstrap_dir"/rpm/dnf*.rpm \
    "$g_bootstrap_dir"/rpm/yum*.rpm \
    "$g_bootstrap_dir"/rpm/policycoreutils*.rpm \
    "$g_bootstrap_dir"/rpm/libdnf*.rpm || /bin/true

  # For semanage
  run_for "centos_7,oracle_7,redhat_7,amazon_2,euler_205" yum install -y --skip-broken  \
    "$g_bootstrap_dir"/rpm/audit*.rpm \
    "$g_bootstrap_dir"/rpm/checkpolicy*.rpm \
    "$g_bootstrap_dir"/rpm/libsemanage*.rpm \
    "$g_bootstrap_dir"/rpm/setools-libs*.rpm \
    "$g_bootstrap_dir"/rpm/policycoreutils*.rpm \
    "$g_bootstrap_dir"/rpm/python-IPy*.rpm \
    "$g_bootstrap_dir"/rpm/libcgroup*.rpm || /bin/true

  # For semanage
  run_for "centos_8,redhat_8,oracle_8,centos_9,redhat_9" yum install -y --skip-broken \
    "$g_bootstrap_dir"/rpm/checkpolicy*.rpm \
    "$g_bootstrap_dir"/rpm/policycoreutils*.rpm \
    "$g_bootstrap_dir"/rpm/python3-audit*.rpm \
    "$g_bootstrap_dir"/rpm/python3-libsemanage*.rpm \
    "$g_bootstrap_dir"/rpm/python3-policycoreutils*.rpm \
    "$g_bootstrap_dir"/rpm/python3-setools*.rpm || /bin/true

  create_clam_users_yum
  extract_clam_databases "clamupdate"
}

function install_prereq_zypper() {
  zypper -n in policycoreutils-python
}

function allow_freshclam_logging() {
  echo "Build SELinux module to allow freshclam logging."
  echo "module freshclam_log_allow 1.0;" \
       "require { type var_log_t;   type antivirus_t;class file open;     "  \
       "          type antivirus_t; type var_log_t;  class file setattr; }" \
       "allow antivirus_t var_log_t:file setattr; " \
       "allow antivirus_t var_log_t:file open;" > freshclam_log_allow.te
  checkmodule -M -m -o freshclam_log_allow.mod  freshclam_log_allow.te
  semodule_package -o freshclam_log_allow.pp -m freshclam_log_allow.mod

  echo "Install SELinux module to allow freshclam logging."
  semodule -v -i freshclam_log_allow.pp

  rm -f freshclam_log_allow.*
}

function install_prereq_yum() {
  # Used for online and offline installation for Euler OS
  if is_euleros ; then
    allow_freshclam_logging
  fi

  if [ -n "$SBA_OFFLINE_PACKAGE" ] ; then
    install_prereq_yum_offline
    return
  fi

  if is_centos_8_based ; then
    local yum_plugins="yum-plugin-versionlock"
  else
    local yum_plugins="yum-plugin-versionlock yum-priorities"
  fi

  if  [ -z "$g_force_no_sbalinux_repo" ] && ! yum repolist | grep epel &>/dev/null; then
    if [[ $g_distro_name == "amazon" ]]; then
      amazon-linux-extras install epel -y
    elif is_euleros ; then
      rpm --quiet --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8
      return
    else
      local epel_rpm_url=$(printf "$g_epel_rpm_url_template" "$g_distro_version")
      if ! yum install -y "${epel_rpm_url}" ; then
        echo "Failed to install EPEL repo. Check that download URL is accessible: ${epel_rpm_url}"
      fi
    fi
  fi

  yum install -y curl ${yum_plugins}

  # package that provides semanage - needed for AM
  if is_centos_8_based ; then
    local semanage_pkg_name="policycoreutils-python-utils"
  else
    local semanage_pkg_name="policycoreutils-python"
  fi
  yum install -y $semanage_pkg_name

  if is_sysdig_needed && [[ $ARCH == "x86_64" && ($g_distro_name != "euler") ]]; then
    # needed for EDR
    KERNEL_VERSION=$(uname -r)
    if [[ $KERNEL_VERSION == *uek* ]]; then
      yum -q -y install kernel-uek-devel-$KERNEL_VERSION || kernel_warning
    else
      yum -q -y install kernel-devel-$KERNEL_VERSION || kernel_warning
    fi
  fi
}

function kernel_warning() {
  echo "Unable to find kernel development files for the current kernel version $(uname -r)"
  echo "This usually means that your system is not up-to-date or you installed a custom kernel version."
  echo "Please install up-to-date kernel or reboot system to load different installed one"
  exit 2
}

function get_deb_install_candidate() {
  local pkg_name=$1
  local result=$(apt-cache policy $pkg_name | grep 'Candidate:' | sed -r 's/^\s+Candidate:\s+//')
  echo $result
}

function install_deb_pkg_from_file() {
  BASEDIR=$(dirname "$0")
  local pkg_file=$BASEDIR/$1

  apt-get update
  apt-get install -y $pkg_file
}

function install_rpm_pkg_from_file() {
  local pkg_file=$1
  BASEDIR=$(dirname "$0")
  if ! is_suse ; then
    yum install -y $BASEDIR/$pkg_file
  else
    zypper -n in $BASEDIR/$pkg_file
  fi
}

function get_deb_version_to_install() {
  local pkg_name=$1
  local product=$2
  if [[ -z $g_version_to_install ]]; then
    local version=$(get_deb_install_candidate $pkg_name)
  else
    local version=$g_version_to_install
  fi
  echo $version
}

function install_deb_pkg_from_repo() {
  apt-get update
  local product="la"
  local pkg_name=${g_prod_to_pkg[$product]}
  local version=$(get_deb_version_to_install "$pkg_name" "$product")
  apt-get install -y $pkg_name=$version
}

function install_rpm_pkg_from_repo() {
  local product="la"
  if [[ -z $g_version_to_install ]]; then
    if ! is_suse ; then
      yum install -y ${g_prod_to_pkg[$product]}
    else
      zypper -n --gpg-auto-import-keys in ${g_prod_to_pkg[$product]}
    fi
  else
    local pkg_name=${g_prod_to_pkg[$product]}-${g_version_to_install}
    if ! is_suse ; then
      yum install -y $pkg_name
      yum versionlock add $pkg_name
    else
      zypper -n in -f "$pkg_name"
    fi
  fi
}

function uninstall_deb_pkg() {
  local product="la"
  apt-get purge --autoremove -y ${g_prod_to_pkg[$product]}
}

function uninstall_rpm_pkg() {
  local product="la"
  local pkg_name=${g_prod_to_pkg[$product]}
  if ! is_suse ; then
    yum autoremove -y "$pkg_name"
  else
    zypper -n rm "$pkg_name"
  fi
  set +e
  ! is_suse && yum versionlock delete "$pkg_name"
  set -e
}

function find_installed_products() {
  g_installed_products=()

  for product in "${!g_prod_to_pkg[@]}"; do
    local pkg=${g_prod_to_pkg[$product]}
    if [[ $g_package_type == "deb" ]]; then
      if [[ $(dpkg-query -W -f='${Status}' $pkg 2>&1) == 'install ok installed' ]]; then
        g_installed_products+=("$product")
      fi
    elif [[ $g_package_type == "rpm" ]]; then
      if rpm -q $pkg >/dev/null 2>&1; then
        g_installed_products+=("$product")
      fi
    fi
  done
}

function get_script_update_url() {
  if [[ $g_repo_type == "dev" ]]; then
    echo "https://${g_artifactory_fqdn}/artifactory/SBA_GEN/dev/scripts/install.update"
  elif [[ $g_repo_type == "stg" ]]; then
    echo "https://${g_secureupdates_fqdn}/sbalinux/packages/generic/stg/scripts/install.template"
  elif [[ $g_repo_type == "prod" ]]; then
    echo "https://${g_secureupdates_fqdn}/sbalinux/scripts/install.update"
  fi
}

# schedule or remove cron job for product version update
# this function will schedule or remove the update cronjob based on installed products
function schedule_or_remove_update_cron_job() {
  if [[ $g_should_schedule_upgrade == "no" ]]; then
    return
  fi

  local log_base_path="/var/log/checkpoint/common"
  local log_path="${log_base_path}/sbalinux-update.log"
  local cron_file_path="/etc/cron.d/sbalinux-update"
  local logrotate_base_path="/etc/logrotate.d"
  local logrotate_file_path="${logrotate_base_path}/sbalinux-update"
  local cron_job_update_script="$g_save_folder/update_cronjob.sh"

  find_installed_products

  if ((${#g_installed_products[@]} > 0)); then
    save_self
    mkdir -p $log_base_path
    : >$cron_file_path
    local script_update_url=$(get_script_update_url)

    [[ -z $script_update_url ]] && echo "invalid script update url, cannot setup update cron job" && exit 1
    local script_update_tmp_file="/tmp/sbalinux-install-update.tmp"

    local lock_cmd='[ "${SBA_FLOCKER}" != "$0" ] && exec env SBA_FLOCKER="$0" flock -E 254 -en "/tmp/sbalinux-update-job.lock" "$0" "$@" || :'
    local env_vars_exports="set -o allexport; source $g_env_file; set +o allexport"
    local echo_log_cmd="echo \"--- starting update: \$(date) ---\""

    echo "schedule cronjob"
    if [[ $g_package_type == "deb" ]]; then
      local script_update_cmd="apt-get update; apt-get install -y ${g_installer_package_name}"
    elif is_suse ; then
      local script_update_cmd="zypper -n in ${g_installer_package_name}"
    elif [[ $g_package_type == "rpm" ]]; then
      local script_update_cmd="yum install -y ${g_installer_package_name}"
    fi
    echo "after schedule cronjob"
    local satellite=""
    if [[ -n "$g_force_no_sbalinux_repo" ]] ; then
      satellite="--satellite yes"
    fi

    local product_update_cmd="${g_saved_script} update $satellite"
    if [[ "$g_got_remote_install_product_arg" == 1 ]] ; then
      product_update_cmd+=" --product $g_remote_install_products"
    elif [[ ! -z "$g_update_product" && "$g_update_product" != "$g_default_blades_set" ]] ; then
      product_update_cmd+=" --product $g_update_product"
    fi

    : >$cron_job_update_script
    chmod 744 $cron_job_update_script
    echo '#!/bin/bash' >>$cron_job_update_script
    echo $lock_cmd >>$cron_job_update_script
    echo $env_vars_exports >>$cron_job_update_script
    echo $echo_log_cmd >>$cron_job_update_script
    echo $script_update_cmd >>$cron_job_update_script
    echo $product_update_cmd >>$cron_job_update_script

    echo "$g_update_cron_timing  root  $cron_job_update_script >> ${log_path} 2>&1" >>$cron_file_path

    logrotate_log_file "$logrotate_base_path" "$logrotate_file_path" "$log_path"
  else
    # remove installer package
    set +e
    if [[ $g_package_type == "deb" ]]; then
      apt-get purge -y ${g_installer_package_name}
    elif is_suse ; then
      zypper -n rm ${g_installer_package_name}
    elif [[ $g_package_type == "rpm" ]]; then
      yum autoremove -y ${g_installer_package_name}
    fi
    set -e

    # clean-up any additional cron job related files
    [ "$g_switching_repo" == 0 ] && remove_self
    rm -f $cron_file_path
    rm -f $logrotate_file_path
    rm -f $cron_job_update_script
    rm -f $g_cron_file_switch_repo_path
    set +e
    rm -df $g_save_folder
    set -e
  fi
}

function get_product_from_deb_file() {
  local pkg_filename=$1
  local pkg_name=$(dpkg-deb -f $pkg_filename Package)
  for product in "${!g_prod_to_pkg[@]}"; do
    if [[ $pkg_name == $(g_prod_to_pkg)[$product] ]]; then
      echo $pkg_name
      return 0
    fi
  done
  echo "package file ${pkg_filename} is not valid for installation"
  exit 1
}

function get_product_from_rpm_file() {
  local pkg_filename=$1
  local pkg_name=$(rpm -qp $pkg_filename --queryformat '%{NAME}')
  for product in "${!g_prod_to_pkg[@]}"; do
    if [[ $pkg_name == $(g_prod_to_pkg)[$product] ]]; then
      echo $pkg_name
      return 0
    fi
  done
  echo "package file ${pkg_filename} is not valid for installation"
  exit 1
}

# save copy of this script for invokation from cron jobs
function save_self() {
  mkdir -p $g_save_folder
  if [[ "$0" != $g_saved_script ]]; then
    cp -f "$0" $g_saved_script
    chmod 744 $g_saved_script
  fi
}

# remove the saved copy of this script
function remove_self() {
  if [[ -f $g_saved_script ]]; then
    rm -f $g_saved_script
  fi
}

function do_remote_install() {
  set_repo_type
  set_blades_from_products $g_remote_install_products

  write_env_file
  schedule_install_cron_job $g_args
  store_config_dat_file
  write_ca_cert_and_sig
  if [[ $g_package_type == "deb" ]]; then
    install_prereq_apt
    [[ -z "$g_force_no_sbalinux_repo" ]] && configure_deb_repo $g_repo_type
    install_deb_pkg_from_repo
  elif [[ $g_package_type == "rpm" ]]; then
    if ! is_suse ; then
      install_prereq_yum
    else
      install_prereq_zypper
    fi
    [[ -z "$g_force_no_sbalinux_repo" ]] && configure_rpm_repo $g_repo_type
    install_rpm_pkg_from_repo
  fi

  remove_install_cron_job
  if [ ! -n "$SBA_OFFLINE_PACKAGE" ] ; then
    schedule_or_remove_update_cron_job
  fi
}

function do_file_install() {
  pkg_file=$g_local_install_file_name
  if [[ -f $pkg_file ]]; then
    set_repo_type
    set_blades_from_products $g_remote_install_products
    write_env_file
    schedule_install_cron_job $g_args
    store_config_dat_file
    write_ca_cert_and_sig
    if [[ $g_package_type == "deb" ]]; then
      install_prereq_apt
      [[ -z "$g_force_no_sbalinux_repo" ]] && configure_deb_repo $g_repo_type
      install_deb_pkg_from_file $pkg_file
    elif [[ $g_package_type == "rpm" ]]; then
      if ! is_suse ; then
        install_prereq_yum
      else
        install_prereq_zypper
      fi
      [[ -z "$g_force_no_sbalinux_repo" ]] && configure_rpm_repo $g_repo_type
      install_rpm_pkg_from_file $pkg_file
    fi
    remove_install_cron_job
  else
    echo "cannot find package file ${pkg_file}"
    exit 1
  fi
}

function do_uninstall() {
  set_blades_from_products "$g_uninstall_product"

  echo "deleting all blades dependencies of Linux Agent"
  set +e
  stop_service "cpla"
  if [ "$g_switching_repo" == 0 ]; then
    $g_cpla_path uninstall_all
  else
    $g_cpla_path uninstall_all --skip-notification
  fi
  set -e

  if [[ $g_package_type == "deb" ]]; then
    uninstall_deb_pkg
    [[ -z "$g_force_no_sbalinux_repo" ]] && remove_deb_repo
  elif [[ $g_package_type == "rpm" ]]; then
    uninstall_rpm_pkg
    [[ -z "$g_force_no_sbalinux_repo" ]] && remove_rpm_repo
  fi

  [ -d "$g_offline_repo_path" ] && rm -rf "$g_offline_repo_path"

  schedule_or_remove_update_cron_job

  if [ "$g_switching_repo" == 0 ]; then
    remove_ca_cert_and_sig
    remove_env_file
    remove_leftovers
  fi
}

function check_config_cmd_args() {
  if [[ $num_of_config_args == 0 ]]; then
    echo "Please enter at least one argument to config"
    exit 1
  fi

  # accept base64 encoded key
  if [[ ! $SBA_MANAGEMENT_KEY =~ ^[A-Za-z0-9+/=]*$ ]]; then
    echo "Illegal management server key"
    exit 1
  fi

  if [[ ! -z $SBA_MANAGEMENT_URL && ! $SBA_MANAGEMENT_URL =~ ^https?:\/\/ ]]; then
    echo "Illegal management server url $SBA_MANAGEMENT_URL"
    exit 1
  fi

  if [[ ! -z $HTTP_PROXY && -z $(is_http_url $HTTP_PROXY) && ! $HTTP_PROXY == "none" ]]; then
    echo "Illegal http proxy url"
    exit 1
  fi

  if [[ ! -z $HTTPS_PROXY && -z $(is_http_url $HTTPS_PROXY) && ! $HTTPS_PROXY == "none" ]]; then
    echo "Illegal https proxy url"
    exit 1
  fi
}

# update service environment variable inside systemd service conf file
function update_service_env() {
  local conf_file=$1
  local key=$2
  local value=$3
  if [[ $3 == "none" ]]; then
    value=""
  fi
  sed -i "s|\(\"${key}=\).*\(\"\)|\1${value}\2|" $conf_file
}

# perform config operation
function do_config() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    echo "There is no installed product to config"
    exit 1
  fi

  local product="la"
  echo "Updating configuration for '$product':"
  local conf_file

  conf_file=$g_la_conf_file_path

  if [[ ! -z $SBA_MANAGEMENT_KEY ]]; then
    update_service_env $conf_file "SBA_MANAGEMENT_KEY" "$SBA_MANAGEMENT_KEY"
    update_env_file "SBA_MANAGEMENT_KEY" "$SBA_MANAGEMENT_KEY"
    echo "Updated management server key"
  fi

  if [[ ! -z $SBA_MANAGEMENT_URL ]]; then
    update_service_env $conf_file "SBA_MANAGEMENT_URL" "$SBA_MANAGEMENT_URL"
    update_env_file "SBA_MANAGEMENT_URL" "$SBA_MANAGEMENT_URL"
    echo "Updated management server url"
  fi

  if [[ ! -z $SBA_ENABLE_BG ]]; then
    update_service_env $conf_file "SBA_ENABLE_BG" "$SBA_ENABLE_BG"
    update_env_file "SBA_ENABLE_BG" "$SBA_ENABLE_BG"
    echo "Updated BG status"
  fi

  if [[ ! -z $SBA_CONFIG_DAT_FILE ]]; then
    update_service_env $conf_file "SBA_CONFIG_DAT_FILE" "$SBA_CONFIG_DAT_FILE"
    update_env_file "SBA_CONFIG_DAT_FILE" "$SBA_CONFIG_DAT_FILE"
    echo "Updated config.dat file path"
  fi

  if [[ ! -z $HTTP_PROXY ]]; then
    update_service_env $conf_file "HTTP_PROXY" "$HTTP_PROXY"
    update_service_env $conf_file "http_proxy" "$HTTP_PROXY"
    update_env_file "HTTP_PROXY" "$HTTP_PROXY"
    update_env_file "http_proxy" "$HTTP_PROXY"
    echo "Updated http proxy"
  fi

  if [[ ! -z $HTTPS_PROXY ]]; then
    update_service_env $conf_file "HTTPS_PROXY" "$HTTPS_PROXY"
    update_service_env $conf_file "https_proxy" "$HTTPS_PROXY"
    update_env_file "HTTPS_PROXY" "$HTTPS_PROXY"
    update_env_file "https_proxy" "$HTTPS_PROXY"
    echo "Updated https proxy"
  fi

  if [[ ! -z $NO_PROXY ]]; then
    update_service_env $conf_file "NO_PROXY" "$NO_PROXY"
    update_service_env $conf_file "no_proxy" "$NO_PROXY"
    update_env_file "NO_PROXY" "$NO_PROXY"
    update_env_file "no_proxy" "$NO_PROXY"
    echo "Updated proxy bypass list"
  fi

  if [[ ! -z $SBA_AUTH_PRINCIPAL ]]; then
    update_service_env $conf_file "SBA_AUTH_PRINCIPAL" "$SBA_AUTH_PRINCIPAL"
    update_env_file "SBA_AUTH_PRINCIPAL" "$SBA_AUTH_PRINCIPAL"
    echo "Updated management authentication principal"
  fi

  if [[ ! -z $SBA_USE_DA ]]; then
    update_service_env $conf_file "SBA_USE_DA" "$SBA_USE_DA"
    update_env_file "SBA_USE_DA" "$SBA_USE_DA"
    echo "Updated DA setting"
  fi

  if [[ ! -z $SBA_VDS_LOCATION_GUID ]]; then
    update_service_env $conf_file "SBA_VDS_LOCATION_GUID" "$SBA_VDS_LOCATION_GUID"
    update_env_file "SBA_VDS_LOCATION_GUID" "$SBA_VDS_LOCATION_GUID"
    echo "Updated VDS id"
  fi

  if [[ ! -z $USE_CPCLAM ]]; then
    update_service_env $conf_file "USE_CPCLAM" "$USE_CPCLAM"
    update_env_file "USE_CPCLAM" "$USE_CPCLAM"
    echo "Updated CPCLAM repo"
  fi

  if [[ ! -z $SBA_MITRE ]]; then
    update_service_env $conf_file "SBA_MITRE" "$SBA_MITRE"
    update_env_file "SBA_MITRE" "$SBA_MITRE"
    echo "Updated Mitre flag"
  fi

  if [[ ! -z $SBA_OFFLINE_PACKAGE ]]; then
    update_service_env $conf_file "SBA_OFFLINE_PACKAGE" "$SBA_OFFLINE_PACKAGE"
    update_env_file "SBA_OFFLINE_PACKAGE" "$SBA_OFFLINE_PACKAGE"
    echo "Update LA offline package flag"
  fi

  if [[ ! -z $SBA_PRODUCT_UPDATE_DELAY_MIN ]]; then
    update_service_env $conf_file "SBA_PRODUCT_UPDATE_DELAY_MIN" "$SBA_PRODUCT_UPDATE_DELAY_MIN"
    update_env_file "SBA_PRODUCT_UPDATE_DELAY_MIN" "$SBA_PRODUCT_UPDATE_DELAY_MIN"
    echo "Updated product update delay flag"
  fi

  if [[ ! -z $SBA_DISABLE_TH_ALERTS ]]; then
    update_service_env $conf_file "SBA_DISABLE_TH_ALERTS" "$SBA_DISABLE_TH_ALERTS"
    update_env_file "SBA_DISABLE_TH_ALERTS" "$SBA_DISABLE_TH_ALERTS"
    echo "Updated TH alerts flag"
  fi

  systemctl daemon-reload
}

# placeholder function for a custom action to be performed during update
function update_custom_action() {
  # if env file is missing during update write it according to the current environment
  # this is needed if upgrading from script version <= 0.0.14
  if [[ ! -f $g_env_file ]]; then
    write_env_file
  fi
}

function apt_add_public_signature_key() {
  set_repo_type
  local repo_type="$g_repo_type"
  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.public"
  elif [[ $repo_type == "dev"  ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local key_url="https://${repo_fqdn}/artifactory/api/gpg/key/public"
    # add proxy bypass for artifactory
    bypass_proxy ${repo_fqdn}
  else
    echo "invalid repository type"
    exit 1
  fi
  curl -s $key_url | apt-key add -
}

function import_latest_rpm_repo_key() {
  set_repo_type
  local repo_type="$g_repo_type"
  if [[ $repo_type == "prod" || $repo_type == "stg" ]]; then
    local repo_fqdn=$g_secureupdates_fqdn
    local key_url="https://${repo_fqdn}/sbalinux/sbalinux-gpg-key.asc"
  elif [[ $repo_type == "dev" ]]; then
    local repo_fqdn=$g_artifactory_fqdn
    local key_url="https://${repo_fqdn}/artifactory/SBA_GEN/repo_public_keys/rpm/sbalinux-gpg-key.asc"
    # add proxy bypass for artifactory
    bypass_proxy $repo_fqdn
  else
    echo "invalid repository type"
    exit 1
  fi
  is_sysdig_needed && import_sysdig_rpm_key
  rpm --import $key_url
}

function do_update_from_repo() {
  if [[ $g_package_type == "deb" ]]; then
    if [[ ! -f $g_deb_repo_config_file && -z "$g_force_no_sbalinux_repo" ]]; then
      echo "sbalinux debian repository not defined"
      exit 1
    fi
    apt_add_public_signature_key
    update_deb_pkg_from_repo
  elif [[ $g_package_type == "rpm" ]]; then
    if [[ ! -f $g_rpm_repo_config_file && -z "$g_force_no_sbalinux_repo" ]]; then
      echo "sbalinux rpm repository not defined"
      exit 1
    fi
    import_latest_rpm_repo_key
    update_rpm_pkg_from_repo
  fi
  set_cpla_required_products "${g_blades[@]}"
  # do a custom action
  update_custom_action
  # rewrite update cron job cron.d file and script file in case they need to be updated
  schedule_or_remove_update_cron_job
}

function update_deb_pkg_from_repo() {
  local product="la"

  local version_str=""
  if [[ ! -z $g_version_to_install ]]; then
    version_str="=${g_version_to_install}"
  fi

  apt-get update
  apt-get install -y --only-upgrade "${g_prod_to_pkg[$product]}${version_str}"
}

function update_rpm_pkg_from_repo() {
  local product="la"
  echo "update_rpm_pkg_from_repo"
  if is_suse ; then
    zypper -n refresh
    zypper -n up "${g_prod_to_pkg[$product]}"
  else
    if [[ ! -z $g_version_to_install ]]; then
      local pkg_name=${g_prod_to_pkg[$product]}-${g_version_to_install}
      yum install -y $pkg_name
    else
      yum update -y "${g_prod_to_pkg[$product]}"
    fi
  fi
}

function store_config_dat_file() {
  if [[ ! -z $g_da_config_dat_content ]]; then
    mkdir -p $g_da_config_dat_base_path
    echo $g_da_config_dat_content >$g_da_config_dat_file
  fi
}

# write ca cert and sig file from base64 encoded external arguments
function write_ca_cert_and_sig() {
  if [[ ! -z $g_mgmt_ca_cert_data_base64 && ! -z $g_mgmt_ca_cert_sig_data_base64 ]]; then
    mkdir -p $g_ca_cert_base_path
    echo $g_mgmt_ca_cert_data_base64 | base64 --decode >$g_ca_cert_file
    echo $g_mgmt_ca_cert_sig_data_base64 | base64 --decode >$g_ca_cert_sig_file
  fi
}

function remove_ca_cert_and_sig() {
  find_installed_products
  if ((${#g_installed_products[@]} == 0)); then
    rm -f $g_ca_cert_file
    rm -f $g_ca_cert_sig_file
    set +e
    rm -df $g_ca_cert_base_path
    set -e
  fi
}

# when exit code trap occurs, display fail message if exit code > 0
function show_exit_code_trap_error() {
  if (($? > 0)); then
    echo "The $g_operation operation failed! ($(date))"
    if [[ $g_operation == "install" && $g_install_with_cron_job == 'yes' ]]; then
      echo "Another installation attempt was scheduled. It will be started by cron in 30 minutes ($g_cron_file_reinstall_path)"
    fi
  fi
  remove_bootstrap_if_needed
}

# set traps for exit code and ctrl-c to display fail message
function set_trap() {
  trap exit 1 SIGINT
  trap show_exit_code_trap_error EXIT
}

function start_service() {
  local unit_name=$1
  echo "Starting ${unit_name} service"
  systemctl start $unit_name
  # TODO: remove '|| true' after centos_9 installation works
  # without 'Invalid cross-device link' error which doesn't affect cpla service
  systemctl enable $unit_name || true
}

function stop_service() {
  local unit_name=$1
  if systemctl is-active --quiet $unit_name; then
    echo "Stopping ${unit_name} service"
    systemctl stop $unit_name
  fi
  systemctl disable $unit_name
}

function backup_edr_service_conf_file() {
  if [ -e $g_edr_conf_file_path ]; then
    cp $g_edr_conf_file_path $g_products_to_upgrade_conf_dir
  fi
}

function backup_am_service_conf_file() {
  if [ -e $g_am_conf_file_path ]; then
    cp $g_am_conf_file_path $g_products_to_upgrade_conf_dir
  fi
}

function remove_pin_files() {
  local product="$1"
  local deps_pin_file=$(printf "$g_deb_deps_pin_file_template" "$product")
  local pkg_pin_file=$(printf "$g_deb_pkg_pin_file_template" "$product")
  rm -f $deps_pin_file $pkg_pin_file
}

function uninstall_all() {
  # if run uninstall with no arguments, i.e. uninstall all
  local ginstalled
  ginstalled=$(echo "$g_uninstall_product" | xargs)
  local gdefault="${g_default_blades_set},fim"
  if [[ "$ginstalled" == "$gdefault" ]] ; then
    echo "yes"
  else
    echo "no"
  fi
}

function remove_old_products() {
  for pkg in $g_old_products_package_names; do
    if [[ $g_package_type == "deb" ]]; then
      if [[ $(dpkg-query -W -f='${Status}' $pkg 2>&1) == 'install ok installed' ]]; then
        # place service conf in a specific dir so that it can be reused for cpla
        if [[ $pkg == "cpsba-am" ]]; then
          g_products_to_upgrade+=("am")
          backup_am_service_conf_file
          remove_pin_files "am"
        elif [[ $pkg == "cpsba-edr" ]]; then
          g_products_to_upgrade+=("edr")
          backup_edr_service_conf_file
          remove_pin_files "edr"
        fi
        apt-get purge --autoremove -y $pkg || true
      fi
    elif [[ $g_package_type == "rpm" ]]; then
      if rpm -q $pkg >/dev/null 2>&1; then
        # place service conf in a specific dir so that it can be reused for cpla
        if [[ $pkg == "cpsba-am" ]]; then
          g_products_to_upgrade+=("am")
          backup_am_service_conf_file
        elif [[ $pkg == "cpsba-edr" ]]; then
          g_products_to_upgrade+=("edr")
          backup_edr_service_conf_file
        fi
        yum autoremove -y $pkg || true
        yum versionlock delete $pkg || true
      fi
    fi
  done
}

function set_cpla_required_products() {
  echo "Setting cpla blades list"
  local products=("$@")
  local cmdline=""
  for product in ${products[*]}; do
    blade=${g_prod_to_blade[$product]}
    cmdline="$cmdline -b $blade"
  done
  $g_cpla_path set_required_blades $cmdline
}


function migrate_old_products_service_configs() {
  echo "Moving service configuration from old products to cpla"
  if [ "$(ls -A $g_products_to_upgrade_conf_dir)" ]; then
    find $g_products_to_upgrade_conf_dir -name "*.conf" -exec cat {} \; |
      grep -v '\[Service\]' |
      grep -v "^$" |
      awk '{st = index($0, "="); decl = substr($0, st+1); gsub(/"/, "", decl); print decl}' |
      sort |
      uniq \
        >>$g_products_to_upgrade_conf_dir/sbalinux.env
    source $g_products_to_upgrade_conf_dir/sbalinux.env
    do_config
  fi
}

function do_update_deb() {
  if [[ $(dpkg-query -W -f='${Status}' 'cpsba-la' 2>&1) == 'install ok installed' ]]; then
    do_update_from_repo
  else
    install_prereq_apt
    install_deb_pkg_from_repo
    migrate_old_products_service_configs
  fi
}

function do_update_rpm() {
  if rpm -q 'cpsba-la' >/dev/null 2>&1; then
    do_update_from_repo
  else
    [[ -z "$g_force_no_sbalinux_repo" ]] && is_sysdig_needed && import_sysdig_rpm_key
    if ! is_suse ; then
      install_prereq_yum
    else
      install_prereq_zypper
    fi
    install_rpm_pkg_from_repo
    migrate_old_products_service_configs
  fi
}

function do_update() {
  # avoid pined blades in builds < 0.0.463 in order to deliver BG
  # remove me once all customers updated to 0.0.463
  if [[ "$g_update_product" == "edr,am" || "$g_update_product" == "am,edr" ]] ; then
    g_update_product="$g_default_blades_set"
  fi

  set_blades_from_products $g_update_product

  # check audit compatibility in case AM need to be updated,
  # or update to version that at least contains tool to check compatibility
  if [[ "${g_blades[@]}" =~ "am" ]]; then
    local cpla_info_text=$($g_cpla_path info)
    local version=$(echo "$cpla_info_text" | grep -oP 'CPLA version: \K.*')
    if [ -z "$version" ]; then
      version="0.0.0"
    fi

    echo "CPLA version: $version"

    # split version into major, minor and patch
    local major=$(echo $version | cut -d '.' -f 1)
    local minor=$(echo $version | cut -d '.' -f 2)
    local patch=$(echo $version | cut -d '.' -f 3)

    if [ $major -eq 0 ] && [ $minor -eq 0 ] && [ $patch -lt 682 ]; then
      g_version_to_install="0.0.682"
    else
        verify_am_compatibility 0
    fi
  fi

  if [[ $g_package_type == "deb" ]]; then
    do_update_deb
  elif [[ $g_package_type == "rpm" ]]; then
    do_update_rpm
  fi

  if ((${#g_products_to_upgrade[@]} > 0)); then
    set_cpla_required_products "${g_products_to_upgrade[@]}"
  fi

  echo "Installing all blades dependencies of Linux Agent"
  $g_cpla_path install_all
}

function verify_am_compatibility() {
  local need_cleanup=$1
  set +e
  $g_cpla_path check-audit-compat
  local exit_code=$?
  set -e

  # exit code is 1 - fail installation
  if [[ $exit_code -eq 1 ]]; then
    if [[ $need_cleanup -eq 1 ]]; then
      do_uninstall
      remove_install_cron_job
      trap "" EXIT
    fi
    echo "Unable to install Anti Malware. Please contact support."
    exit 1
  fi

  # exit code is 2 - set reboot flag
  if [[ $exit_code -eq 2 ]]; then
    g_need_reboot=1
  fi

  echo "Anti Malware compatibility check completed"
}


if [[ $# -eq 1 && $1 == "--help" ]]; then
  version_str="<developer version>"
  if [[ $SCRIPT_VER =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    version_str="v$SCRIPT_VER"
  fi
  echo "Check Point Sandblast Agent for Linux Installer $version_str"
  echo "Usage: sudo $0 <install|uninstall|config> [options]"
  echo ""
  echo "Possible operations:"
  echo "   install:   install a product"
  echo "   uninstall: uninstall a product"
  echo "   config:    update configuration for an already installed product"
  echo ""
  echo "Options for 'install' operation:"
  echo "  --source <remote|local>             Installation source (default: remote)"
  echo "      remote                          Install from remote package repository"
  echo "      local                           Install from local package file"
  echo "  --product <product>                 Specify product to install, possible products: edr,am (default: both products are installed)"
  echo "                                      Use only if installing from remote package repository"
  echo "  --file_name <file name>             Package file name to install. Use only if installing from local package file"
  echo "  --version <version>                 Product version to install (default: latest). Use only if installing from remote package repository"
  echo "  --url <url>                         Management server url"
  echo "  --key <key>                         Management server key"
  echo "  --http_proxy <url>                  HTTP proxy url"
  echo "  --https_proxy <url>                 HTTPS proxy url"
  echo "  --no_proxy <urls|none|ALL>          bypass proxy for these urls. 'none' leaves the list empty, 'ALL' discards all proxy configuration"
  echo "  --retry <yes|no>                    Schedule another installation attempt if first attempt failed, default: yes"
  echo "  --debug                             Enable debug logging for the client"
  echo "  --selfhealing                       Enable client self-recovery"
  echo "  --auth_principal  <principal>       auth principal which was set up for AD authentication. E.g. krbsvc/sba.com@SBA.COM"
  echo "  --group  <group-guid>               id of virtual directory to put the client into"
  echo ""
  echo "Options for 'uninstall' operation:"
  echo "  --product <product>                 Specify product to uninstall, possible products: edr,am"
  echo ""
  echo "Options for 'config' operation:"
  echo "  --url <url>                         Update management server url"
  echo "  --key <key>                         Update management server key"
  echo "  --http_proxy <url|none>             Update HTTP proxy url. Use 'none' to specify no proxy"
  echo "  --https_proxy <url|none>            Update HTTPS proxy url. Use 'none' to specify no proxy"
  echo "  --no_proxy <urls|none|ALL>          bypass proxy for these urls. Use 'none' for empty list, ',' as delimiter"
  echo "                                      Passing 'ALL' will clear all proxy configuration"
  echo "  --auth_principal  <principal>       auth principal which was set up for AD authentication. E.g. krbsvc/sba.com@SBA.COM"
  echo ""
  exit 0
fi

# exported variable to be used by each product package scripts
# by default pick proxy settings from the environment
export HTTP_PROXY=${HTTP_PROXY:=""}
export HTTPS_PROXY=${HTTPS_PROXY:=""}
export NO_PROXY=${NO_PROXY:=""}
export SBA_MANAGEMENT_KEY=""
export SBA_MANAGEMENT_URL=""
export SBA_CONFIG_DAT_FILE=${SBA_CONFIG_DAT_FILE:=""}
export SBA_ENABLE_BG=${SBA_ENABLE_BG:=""}
export SBA_FORCE_DISTRO=${SBA_FORCE_DISTRO:=""}
export SBA_AUTH_PRINCIPAL=${SBA_AUTH_PRINCIPAL:=""}
export SBA_USE_DA=${SBA_USE_DA:=""}
export SBA_MITRE=${SBA_MITRE:=""}
export USE_CPCLAM=${USE_CPCLAM:=""}
export SBA_VDS_LOCATION_GUID=${SBA_VDS_LOCATION_GUID:=""}
export SBA_OFFLINE_PACKAGE=${SBA_OFFLINE_PACKAGE:=""}
export SBA_PRODUCT_UPDATE_DELAY_MIN=${SBA_PRODUCT_UPDATE_DELAY_MIN:=""}
export SBA_DISABLE_TH_ALERTS=${SBA_DISABLE_TH_ALERTS:=""}


g_package_type=""
g_distro_name=""
g_distro_version=""
g_rpm_repo_config_file=""

# CA cert and signature
g_mgmt_ca_cert_data_base64=""
g_mgmt_ca_cert_sig_data_base64=""
g_ca_cert_base_path="/var/lib/checkpoint/cpmgmt"
g_ca_cert_file="${g_ca_cert_base_path}/server.crt"
g_ca_cert_sig_file="${g_ca_cert_base_path}/server.crt.sig"

# DA config.dat
g_da_config_dat_content=""
g_da_config_dat_base_path="/var/lib/checkpoint/da"
g_da_config_dat_file="${g_da_config_dat_base_path}/config.dat"

g_install_source="remote"
# flag to indicate that products to install from remote repo were given by the user
g_got_remote_install_product_arg=0

if [[ $ARCH == "x86_64" ]]; then
  g_default_blades_set="edr,am,bg"
else
  g_default_blades_set="am"
fi

g_need_reboot=0

g_remote_install_products=${g_default_blades_set}
g_local_install_file_name=""
g_repo_type="prod"
g_uninstall_product="${g_default_blades_set},fim"
g_update_product=${g_default_blades_set}

# products requested to be installed or uninstalled
g_blades=()
# products actually installed
g_installed_products=()
# specific product version to install
g_version_to_install=""

g_update_cron_timing=${SBA_UPDATE_CRON_TIMING:="0 * * * *"}
g_install_cron_timing=${SBA_INSTALL_CRON_TIMING:="*/30 * * * *"}

g_should_schedule_upgrade="yes"
g_install_with_cron_job="yes"
g_cron_file_reinstall_path="/etc/cron.d/sbalinux-install"
g_cron_file_switch_repo_path="/etc/cron.d/sbalinux-product-update"

g_am_conf_file_path="/etc/systemd/system/cpam.service.d/cpam.conf"
g_la_conf_file_path="/etc/systemd/system/cpla.service.d/cpla.conf"
g_edr_conf_file_path="/etc/systemd/system/cpsba.service.d/cpsba.conf"
# for testing: systemctl show --property=Environment <service>

g_args="${@}"

g_epel_rpm_url_template="https://dl.fedoraproject.org/pub/epel/epel-release-latest-%s.noarch.rpm"

g_deb_repo_config_file="/etc/apt/sources.list.d/sbalinux.list"
# preferences file for pinning package dependencies
g_deb_deps_pin_file_template="/etc/apt/preferences.d/sbalinux-%s-deps.pref"
# preferences file for the version of the product itself
g_deb_pkg_pin_file_template="/etc/apt/preferences.d/sbalinux-%s-pkg.pref"

g_secureupdates_fqdn="secureupdates.checkpoint.com"
g_artifactory_fqdn="artifactory-npm.checkpoint.com"

# folder to save helper scripts generated for the update process
g_save_folder="/etc/checkpoint/common"
# path to saved install script used for cron job updates
g_saved_script="${g_save_folder}/install.sh"
# env file path
g_env_file="${g_save_folder}/sbalinux.env"
# package name for installer updates
g_installer_package_name="cpsba-install"
g_cpla_path="/usr/bin/cpla"
# keep g_available_blades_list list space separated.
g_available_blades_list="AM SBA BG FIM"
g_available_products_list="am edr bg fim"
# map of product to its package name
declare -A g_prod_to_pkg
g_prod_to_pkg['la']="cpsba-la"
# map product name to cpla blade name
declare -A g_prod_to_blade
g_prod_to_blade['am']="AM"
g_prod_to_blade['edr']="SBA"
g_prod_to_blade['bg']="BG"
g_prod_to_blade['fim']="FIM"
# old-style packages that have to be removed
g_old_products_package_names="cpsba-edr cpsba-am cpla-install"
g_products_to_upgrade=()
g_products_to_upgrade_conf_dir=$(mktemp -d)
g_force_no_sbalinux_repo=""
# offline_package related variables
g_offline_repo_path="/var/lib/checkpoint/sbalinux_offline"
g_bootstrap_dir=
# leave configs/logs/etc after removal, don't notify mgmt
g_switching_repo=0


# parse args
g_operation=${1:-""}
if [[ -z $g_operation ]]; then
  echo "operation not defined, for usage run: $0 --help"
  exit 1
fi
shift

# apply valid external arguments so they can serve as defaults
apply_embedded_arguments

# parse command line arguments
set +e

if [[ $g_operation == "install" ]]; then
  while (($#)); do
    if [[ $1 == "--http_proxy" ]]; then
      shift
      export HTTP_PROXY=${1:-""}
      export http_proxy=${1:-""}
    elif [[ $1 == "--https_proxy" ]]; then
      shift
      export HTTPS_PROXY=${1:-""}
      export https_proxy=${1:-""}
    elif [[ $1 == "--no_proxy" ]]; then
      shift
      export NO_PROXY=${1:-""}
      export no_proxy=${1:-""}
      if [[ $1 == "ALL" ]]; then
        export HTTP_PROXY=""
        export HTTPS_PROXY=""
        export NO_PROXY=""
        export http_proxy=""
        export https_proxy=""
        export no_proxy=""
      fi
    elif [[ $1 == "--key" ]]; then
      shift
      export SBA_MANAGEMENT_KEY=${1:-""}
    elif [[ $1 == "--url" ]]; then
      shift
      export SBA_MANAGEMENT_URL=${1:-""}
    elif [[ $1 == "--source" ]]; then
      shift
      g_install_source=${1:-""}
    elif [[ $1 == "--product" ]]; then
      shift
      g_remote_install_products=${1:-""}
      g_got_remote_install_product_arg=1
    elif [[ $1 == "--file_name" ]]; then
      shift
      g_local_install_file_name=${1:-""}
    elif [[ $1 == "--version" ]]; then
      shift
      g_version_to_install=${1:-""}
    elif [[ $1 == "--retry" ]]; then
      shift
      g_install_with_cron_job=${1:-""}
    elif [[ $1 == "--debug" ]]; then
      export SBA_LOG_LEVEL=DEBUG
      shift
    elif [[ $1 == "--selfhealing" ]]; then
      export SBA_SELF_HEALING=1
      shift
    elif [[ $1 == "--auth_principal" ]]; then
      shift
      export SBA_AUTH_PRINCIPAL=${1:-""}
    elif [[ $1 == "--group" ]]; then
      shift
      export SBA_VDS_LOCATION_GUID=${1:-""}
    elif [[ $1 == "--upgrade" ]]; then
      shift
      g_should_schedule_upgrade=${1:-""}
    elif [[ $1 == "--stg" ]]; then
      shift
      export SBA_REPO_TYPE=stg
    # Just for the SIPLEC, do not pre-configure sbalinux repo
    elif [[ $1 == "--satellite" ]]; then
      g_force_no_sbalinux_repo=${1:-""}
      shift
    else
      echo "invalid argument $1"
      exit 1
    fi
    shift
  done
elif [[ $g_operation == "config" ]]; then
  num_of_config_args=0
  # dont inherit anything from the environment
  HTTP_PROXY=""
  HTTPS_PROXY=""
  NO_PROXY=""
  SBA_MANAGEMENT_KEY=""
  SBA_MANAGEMENT_URL=""
  SBA_AUTH_PRINCIPAL=""

  while (($#)); do
    if [[ $1 == "--http_proxy" ]]; then
      shift
      export HTTP_PROXY=${1:-""}
    elif [[ $1 == "--https_proxy" ]]; then
      shift
      export HTTPS_PROXY=${1:-""}
    elif [[ $1 == "--no_proxy" ]]; then
      shift
      export NO_PROXY=${1:-""}
      if [[ $1 == "ALL" ]]; then
        export HTTP_PROXY="none"
        export HTTPS_PROXY="none"
        export NO_PROXY="none"
      fi
    elif [[ $1 == "--key" ]]; then
      shift
      export SBA_MANAGEMENT_KEY=${1:-""}
    elif [[ $1 == "--url" ]]; then
      shift
      export SBA_MANAGEMENT_URL=${1:-""}
    elif [[ $1 == "--auth_principal" ]]; then
      shift
      export SBA_AUTH_PRINCIPAL=${1:-""}
    else
      echo "invalid argument $1"
      exit 1
    fi
    [[ -z ${1:-""} ]] && echo "missing value for config option" && exit 1 || let num_of_config_args++
    shift
  done
elif [[ $g_operation == "uninstall" ]]; then
  while (($#)); do
    if [[ $1 == "--product" ]]; then
      shift
      g_uninstall_product=${1:-""}
    elif [[ $1 == "--switching-repo" ]]; then
      shift
      g_switching_repo=1
    else
      echo "invalid argument $1"
      exit 1
    fi
    shift
  done

elif [[ $g_operation == "update" ]]; then
  while (($#)); do
    if [[ $1 == "--product" ]]; then
      shift
      g_update_product=${1:-""}
    elif [[ $1 == "--satellite" ]]; then
      shift
      g_force_no_sbalinux_repo=${1:-""}
    elif [[ $1 == "--version" ]]; then
      shift
      g_version_to_install=${1:-""}
    else
      echo "invalid argument $1. Use update without arguments or with --product <am,edr,bg>"
      exit 1
    fi
    shift
  done
else
  echo "invalid operation '${g_operation}', valid operations are 'install', 'uninstall'"
  exit 1
fi
set -e

# detect distribution and package time
detect_package_type
if [[ -z $g_package_type ]]; then
  echo "Unsupported distribution or architecture"
  exit 1
fi

# main
if [[ $g_operation == "install" ]]; then
  check_offline_package
  check_install_cmd_args
  check_umask
  force_env_vars
  set_trap

  # TODO: remove a few releases after cpla is made the default method of distribution
  remove_old_products

  find_installed_products
  [ -n "$SBA_OFFLINE_PACKAGE" ] && prepare_offline_package
  if ((${#g_installed_products[@]} == 0)); then
    if [[ $g_install_source == "remote" || -n "$SBA_OFFLINE_PACKAGE" ]] ; then
      if [ -n "$SBA_OFFLINE_PACKAGE" ]; then
        echo "Offline install"
      else
        echo "Remote install"
      fi
      do_remote_install
    elif [[ $g_install_source == "local" ]]; then
      echo "Local install"
      do_file_install
    else
      echo "invalid install source mode"
      exit 1
    fi
  else
    echo "cpla is already installed, set of blades will be updated."
    stop_service "cpla"
    set_blades_from_products $g_remote_install_products
  fi

  # check audit compatibility in case AM need to be installed
  if [[ "${g_blades[@]}" =~ "am" ]]; then
    verify_am_compatibility 1
  fi

  set_cpla_required_products "${g_blades[@]}"

  echo "Installing all blades dependencies of Linux Agent"
  $g_cpla_path install_all
  start_service "cpla"

  if [[ $g_need_reboot == 1 ]]; then
    echo "Rebooting the system"
    reboot
  fi


elif [[ $g_operation == "uninstall" ]]; then
  echo "Uninstall all: $(uninstall_all)"
  set_trap
  # TODO: remove a few releases after cpla is made the default method of distribution
  remove_old_products
  set_blades_from_products $g_uninstall_product
  stop_service cpla
  current_blades=$($g_cpla_path get_required_blades)
  echo "Blades installed in cpla: $current_blades"
  for product in ${g_blades[*]}; do
    echo "Deleting ${g_prod_to_blade["$product"]} blade"
    set +e
    $g_cpla_path uninstall_blade -b ${g_prod_to_blade["$product"]}
    set -e
  done
  current_blades=$($g_cpla_path get_required_blades)

  if [ -z "$current_blades" ] || [ "$current_blades" = "Blades: " ] [ "$(uninstall_all)" == "yes" ] ; then
    do_uninstall
  else
    $g_cpla_path install_all
    echo "CPLA still contain installed blades $current_blades"
    start_service cpla
  fi
elif [[ $g_operation == "config" ]]; then
  check_config_cmd_args
  set_trap
  do_config
  echo "Restarting cpla service"
  systemctl restart cpla
elif [[ $g_operation == "update" ]]; then
  set_trap
  remove_old_products
  do_update
  start_service "cpla"
fi

echo $'\n'"The $g_operation operation completed successfully ($(date))"

exit 0
